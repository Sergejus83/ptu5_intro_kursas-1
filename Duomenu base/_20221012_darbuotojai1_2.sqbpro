<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/pythoncodeacademy/Duomenu base/darbuotojai2.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure pragmas browser query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="200"/><column_width id="3" width="4716"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,11:mainDARBUOTOJAS"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="DARBUOTOJAS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="82"/><column index="2" value="128"/><column index="3" value="164"/><column index="4" value="242"/><column index="5" value="197"/><column index="6" value="185"/><column index="7" value="190"/><column index="8" value="227"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PROJEKTAS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="82"/><column index="2" value="224"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="SKYRIUS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="82"/><column index="2" value="214"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- istraukiam visus duomenis
SELECT * from person;
-- istraukiam tik vardus ir lytis
select first_name, gender from person;
-- isrenkam unikalus gender
SELECT distinct gender from person ;
-- where uzklausos tikslinimas
select * from person WHERE gender = &quot;Female&quot;;
-- salygose naudojamos datos
SELECT * FROM person WHERE date_of_birth &gt; date('1995-01-01');
-- logines salygos
select * FROM person where date_of_birth &gt; date('1994-10-11') and gender = &quot;Female&quot;;
-- rusiavimas  -- galima be ASC
select * from person WHERE gender = &quot;Female&quot; ORDER by date_of_birth ASC;
-- rusiavimas atvirksciai
select * from person WHERE gender = &quot;Female&quot; ORDER by date_of_birth DESC;
-- rusiavvimas pagal kelis stulpelius
SELECT * FROM person ORDER BY gender, last_name;
-- grupavimas
SELECT gender, count(*) FROM person GROUP BY gender;
-- -- grupavimas ir min, max
SELECT gender, count(*), min(date_of_birth), max(date_of_birth) FROM person GROUP BY gender;
-- grupavimas ir min, max ir keiciame stulpelio pavadinima
SELECT gender, count(*) as &quot;count&quot;, min(date_of_birth) AS oldest, max(date_of_birth) AS youngest FROM person GROUP BY gender;
-- grupavimas su salyga
										
										



</sql><sql name="SQL 2">SELECT * FROM person
GROUP BY
	last_name,
	first_name	
HAVING
	date_of_birth
BETWEEN
	date('1980-01-01')
AND
	date('2002-01-01')
;</sql><sql name="SQL 3">-- SELECT * FROM person LIMIT 1
-- Duomenu iterpimas
INSERT INTO person 
	(first_name, last_name, email, date_of_birth, gender, company)
VALUES	
	(
		&quot;Arina&quot;, 
		&quot;Bykova&quot;, 
		&quot;ab@gmail.com&quot;, 
		datetime('1910-01-01 02:12:00'), 
		&quot;Female&quot;, 
		&quot;student&quot;
	);

</sql><sql name="SQL 4">-- duomenu redagavimas - UPDATE
UPDATE person SET date_of_birth=datetime('2010-01-01 09:47:00') WHERE first_name=&quot;Arina&quot;;
</sql><sql name="SQL 5">DELETE from person where first_name=&quot;Donetta&quot;;</sql><sql name="SQL 6">-- atnajonome company kai kurems pagal filtra
-- SELECT * FROM person WHERE gender=&quot;Female&quot; and date_of_birth &gt; date('1997-01-01')
UPDATE person SET company=&quot;Isk UAB&quot; WHERE gender=&quot;Female&quot; and date_of_birth &gt; date('1997-01-01')</sql><sql name="SQL 7">-- SELECT * FROM person WHERE not company = &quot;Isk UAB&quot;;
DELETE FROM person WHERE not company = &quot;Isk UAB&quot;;
SELECT * FROM person;
</sql><sql name="SQL 8">-- istrina visus duomenis is  lenteles
DELETE FROM person;
SELECT * FROM person;
-- istrina visa lentele
DROP TABLE person;
</sql><sql name="SQL UZD1">
-- 1 Išrinkite visus duomenis iš lentelės “DARBUOTOJAI”.
SELECT * from DARBUOTOJAI;

-- 2 Išrinkite visus duomenis iš stulpelio “GIMIMO_DATA” - lentelėje “DARBUOTOJAI”.
SELECT &quot;GIMIMO_DATA&quot; FROM DARBUOTOJAI;

-- 3 Išrinkite visus duomenis iš stulpelių “VARDAS”,”PAVARDĖ”, “PAREIGOS” - lentelėje “DARBUOTOJAI”.
SELECT &quot;VARDAS&quot;,&quot;PAVARDĖ&quot;, &quot;PAREIGOS&quot; FROM DARBUOTOJAI;

-- 4 Išrinkite unikalias reikšmes iš stulpelio SKYRIUS_PAVADINIMAS - lentelėje “DARBUOTOJAI”.
SELECT &quot;VARDAS&quot;,&quot;PAVARDĖ&quot;, &quot;PAREIGOS&quot; FROM DARBUOTOJAI;

-- 5 Išrinkite visus duomenis apie darbuotojus, kurie dirba Gamybos skyriuje.
SELECT * FROM DARBUOTOJAI WHERE &quot;SKYRIUS_PAVADINIMAS&quot;=&quot;Gamybos&quot;;

-- 6 Išrinkite duomenis, kokias pareigas užima Giedrius
-- SELECT * FROM DARBUOTOJAI WHERE &quot;VARDAS&quot; = &quot;Giedrius&quot;, &quot;PAREIGOS&quot;;
SELECT distinct &quot;VARDAS&quot;, &quot;PAREIGOS&quot; from DARBUOTOJAI WHERE &quot;VARDAS&quot; = &quot;Giedrius&quot;;

-- 7 Išrinkite visus duomenis apie darbuotojus, kurių gimimo data - 1986-09-19
SELECT * FROM DARBUOTOJAI WHERE &quot;GIMIMO_DATA&quot;=('1986-09-19');

-- 8 Išrinkite darbuotojų vardus, kurių pavardės yra Sabutis
UPDATE DARBUOTOJAI SET &quot;VARDAS&quot;=&quot;&quot; WHERE &quot;PAVARDĖ&quot;=&quot;Sabutis&quot;;

-- 9 Išrinkite duomenis (vardą ir pavardę) apie programuotojus iš Gamybos skyriaus
UPDATE DARBUOTOJAI SET &quot;VARDAS&quot;=&quot;&quot;, &quot;PAVARDĖ&quot;=&quot;&quot; WHERE &quot;PAREIGOS&quot;=&quot;Programuotojas&quot; and &quot;SKYRIUS_PAVADINIMAS&quot;=&quot;Gamybos&quot;;

-- 10 Įterpkite į lentelę “DARBUOTOJAI” naują darbuotoją, užpildydami visus reikiamus laukus 
-- (vardą, pavardę, gimimo metus, pareigas, skyriaus pavadinimą).
INSERT INTO DARBUOTOJAI 
	--(first_name, last_name, email, date_of_birth, gender, company)
VALUES	
	(
		&quot;Sergejus&quot;, 
		&quot;Bykovas&quot;, 
		date('1983-01-05'), 
		&quot;Direktorius&quot;, 
		&quot;Vadovybės&quot;
	);
	
-- 11 Įterpkite į lentelę “DARBUOTOJAI” naują darbuotoją, užpildydami tik laukus (vardą, pavardę, gimimo metus). 
-- Pareigas ir skyriaus pavadinimą palikite neužpildytus.
INSERT INTO DARBUOTOJAI 
	(VARDAS, PAVARDĖ, GIMIMO_DATA)
VALUES 
	(&quot;Arina&quot;, &quot;Bykova&quot;, date('2010-08-31'));
	
-- 12 Užpildykite likusius tuščius laukus “DARBUOTOJAI” lentelėje, jūsų prieš tai įterptame įraše. 
-- Priskirkite darbuotojui pareigas ir skyrių.
UPDATE DARBUOTOJAI SET &quot;PAREIGOS&quot;=&quot;Mokyne&quot;, &quot;SKYRIUS_PAVADINIMAS&quot;=&quot;Progimnazija&quot; WHERE VARDAS=&quot;Arina&quot; and &quot;PAVARDĖ&quot; = &quot;Bykova&quot;;

-- 13 Ištrinkite lentelės “DARBUOTOJAI” įrašą, kurio gimimo data yra tokia, kurią jūs sukūrėte.
DELETE FROM DARBUOTOJAI WHERE GIMIMO_DATA = date('2010-08-31');

-- 14 Įterpkite, du darbuotojus, pavarde Antanaitis kurių pareigos būtų “Programuotojas”.
INSERT INTO DARBUOTOJAI 
	(PAVARDĖ, PAREIGOS)
VALUES	
	(
		&quot;Antanaitis&quot;, 
		&quot;Programuotojas&quot;
	);

-- 15 Pakeiskite, abiejų Antanaičių pareigas į “Testuotojas” vienu sakiniu.
UPDATE DARBUOTOJAI SET PAREIGOS=&quot;Testuotojas&quot; WHERE PAVARDĖ=&quot;Antanaitis&quot;;

-- 16 Suskaičiuokite, kiek įmonėje dirba Testuotojų.
	-- GROUP BY gender
SELECT PAREIGOS, count(*)FROM DARBUOTOJAI
GROUP BY
	PAREIGOS	
HAVING
	PAREIGOS=&quot;Testuotojas&quot;


</sql><sql name="SQL_2 1">-- Platesnis WHERE panaudojimas, BETWEEN ... AND ....
SELECT * FROM cars;
SELECT * FROM cars WHERE price BETWEEN 10000 AND 30000;
-- tikrinti ir pagal sarasa
SELECT * FROM cars WHERE year IN (2005, 2010, 2011)ORDER BY year;
-- paieska tekste (gamintojas yra prasideda nuo T raide)
SELECT * FROM cars WHERE make LIKE 'T%';
-- paieska tekste (gamintojas yra prasibaiga a raide)
SELECT * FROM cars WHERE make LIKE '%a';
-- paieska tekste (gamintojas yra pavadinime t arba T raide)
SELECT * FROM cars WHERE make LIKE '%t%';
-- place holder (be kokie 2 simboliai '__')
SELECT * FROM cars WHERE model LIKE'__';
SELECT * FROM cars WHERE model LIKE'X_';
SELECT * FROM cars WHERE make LIKE'__n%';
-- NULL
SELECT * FROM cars WHERE color IS NULL;
UPDATE cars SET color = &quot;Ugly&quot; WHERE color IS NULL;
SELECT * FROM cars WHERE color LIKE &quot;Ugly&quot;;
-- Logines salygos AND, OR, NOT
-- preoritetai:   =, NOT, AND, OR
SELECT * FROM cars WHERE make = &quot;Ford&quot; AND price &gt; 40000;
SELECT * FROM cars WHERE price &lt; 40000 OR color = &quot;Pink&quot;;
SELECT * FROM cars WHERE (price &lt; 40000 OR color = &quot;Pink&quot;) AND year &gt; 2000;
SELECT * FROM cars WHERE color NOT IN (&quot;Violet&quot;, &quot;Yellow&quot;, &quot;Ugly&quot;, &quot;Green&quot;, &quot;Fuscia&quot;, &quot;Red&quot;, &quot;Pink&quot;, &quot;Blue&quot;);
SELECT * FROM cars WHERE (make = &quot;Volvo&quot; OR make = &quot;Ford&quot;) AND price NOT BETWEEN 10000 AND 50000;
-- rusiavimas
SELECT * FROM cars ORDER BY price;
SELECT * FROM cars ORDER BY price DESC LIMIT 5;
-- sekancius 5 eeles
SELECT * FROM cars ORDER BY price DESC LIMIT 5 OFFSET 5;
-- abicele tvarka
SELECT * FROM cars ORDER BY make;
-- neziuri i dideles raides
SELECT * FROM cars WHERE make = &quot;toyota&quot; COLLATE NOCASE;
-- rezultatu manupuliavimas su || operatorium
SELECT &quot;GAMINTOJAS: &quot; || make, model FROM cars;
SELECT &quot;GAMINTOJAS: &quot; || make as gamintojas, model as modeliis FROM cars LIMIT 10;
SELECT make, model, round(price/3.48, 2) as price_euro FROM cars;
SELECT make || &quot; &quot; || model || &quot;, &quot; || year as car_model_year FROM cars ORDER by year;
-- amziaus skaiciavimas
SELECT make, model, 2022 - year AS age FROM cars ORDER By age;
SELECT make, model, price, round(price/1.18, 2) as &quot;price, dollar&quot; from cars ORDER By &quot;price, dollar&quot;;

-- Taisingas Grupavimas
-- grupavimui dažniausiai naudojamos funkcijos:
-- AVG() - nustato vidurkį grupei
-- COUNT() - nustato eilučių, kurių išraiška yra apibrėžta, kiekį lentelėje
-- MAX() - nustato didžiausią reikšmę
-- MIN() - nustato mažiausią reikšmę
-- SUM() - nustato bendrą sumą, ignoruojant neapibrėžtas reikšmes
SELECT sum(price)from cars;
SELECT MIN(price), MAX(price), AVG(price) from cars;
SELECT AVG(price) from cars GROUP bY make;
SELECT make, AVG(year), count(*) FROM cars GROUP by make HAVING count(*) &gt; 1;
SELECT make, AVG(price), count(*) FROM cars GROUP by make HAVING count(*) &gt; 1;
-- prnagiausiais avto
SELECT make, model, MAX(price) from cars;
SELECT color, max(price), make, model,count(*) from cars group by color ORDER by price DESC;
SELECT color, min(price), make, model,count(*) from cars group by color ORDER by price DESC;
SELECT color,round(avg(price), 2 ), make, model from cars group by color ORDER by price DESC;





</sql><sql name="SQL_2 2">-- SELECT make, model, year, price
-- FROM cars
-- WHERE make NOT IN (&quot;Toyota&quot;, &quot;Mercury&quot;, &quot;Volvo&quot;)
-- GROUP BY price
-- HAVING year &gt; 2007
-- ORDER BY make;

SELECT make, model, year, max(price), color, count(*)
FROM cars
-- 
WHERE make NOT IN (&quot;Toyota&quot;, &quot;Mercury&quot;, &quot;Volvo&quot;) and color NOT IN (&quot;Pink&quot;, &quot;Turquoise&quot;)
GROUP BY year
HAVING count(*) &gt; 1
ORDER BY max(price) DESC;</sql><sql name="SQL UZD2">-- 1 Išrinkite duomenis apie darbuotoją (asmens kodą, vardą ir pavarde) iš lenteles DARBUOTOJAS, kuris gimęs 1988 m. liepos 20 d.
SELECT * from DARBUOTOJAS;
SELECT ASMENS_KODAS, VARDAS, PAVARDĖ from DARBUOTOJAS WHERE ASMENS_KODAS LIKE '%88%';

-- 2 Išrinkite duomenis apie darbuotojus (nuo kada dirba, asmens kodą) iš lentelės DARBUOTOJAS, kurie būtų įsidarbinę 
-- nuo 2009 m. spalio 30 d. iki 2012 m. lapkričio 11d.
SELECT DIRBA_NUO, ASMENS_KODAS from DARBUOTOJAS WHERE DIRBA_NUO BETWEEN date('2009-10-30') and date('2012-11-11');

-- 3 Išrinkite duomenis apie darbuotojus (vardą, Skyriaus ID ir Projekto ID) iš lentelės DARBUOTOJAS, kurie dirba 2 ir 3 skyriuose (panaudoti IN operatorių).
SELECT VARDAS, SKYRIUS_ID, PROJEKTAS_ID from DARBUOTOJAS WHERE SKYRIUS_ID IN (2, 3);

-- 4 Išrinkite duomenis (vardą, pavarde ir asmens kodą) apie visas moteris iš lentelės DARBUOTOJAS (panaudojant operatorių LIKE).
SELECT VARDAS,PAVARDĖ, ASMENS_KODAS  from DARBUOTOJAS WHERE ASMENS_KODAS LIKE '4__________' or ASMENS_KODAS LIKe '6__________';

-- 5 Išrinkite visus duomenis apie visus darbuotojus iš lentelės DARBUOTOJAS, kurie yra gimę 12 dieną (panaudojant operatorių LIKE)
SELECT * FROM DARBUOTOJAS WHERE ASMENS_KODAS like '_____12____';

-- 6 išrinkite visus projektus iš lentelės PROJEKTAS, kurių pavadinime antra raidė būtų ‘a’.
SELECT * FROM PROJEKTAS WHERE PAVADINIMAS like '%a%';

-- 7 Išrinkite visus darbuotojus iš lentelės DARBUOTOJAS, kuriems nepaskirtos jokios pareigos.
SELECT * FROM DARBUOTOJAS WHERE PAREIGOS is NULL;

-- 8 Išrinkite duomenis apie darbuotojus (vardą, pavarde, nuo kada dirba ir pareigas), kurie dirba nuo 2011-02-12 ir jų pareigos yra Programuotojai.
SELECT VARDAS, PAVARDĖ, DIRBA_NUO, PAREIGOS FROM DARBUOTOJAS WHERE DIRBA_NUO BETWEEN date('2011-02-12') and date('2022-10-11') and PAREIGOS IN (&quot;Programuotojas&quot;);

-- 9 Išrinkite duomenis apie darbuotojus (vardą, pavardę, Skyriaus ID ir Projekto ID) iš lentelės DARBUOTOJAS, 
-- kurie yra iš Gamybos (2) skyriaus arba 1 projekto.
-- SELECT VARDAS, PAVARDĖ, SKYRIUS_ID, PROJEKTAS_ID FROM DARBUOTOJAS WHERE PAVADINIMAS in (&quot;Gamybos&quot;) from  or PROJEKTAS

-- 10  Išrinkite visus darbuotojų vardus, išskyrus tuos, kurių vardai prasideda raide ‘A’ .

-- 11 Išrinkite duomenis apie darbuotojus (vardą, pavardę ir nuo kada dirba) iš lentelės DARBUOTOJAS ir išrikiuokite visus duomenis nuo dirbančio seniausiai iki naujausiai.

-- 12 Išrinkite duomenis apie darbuotojus (vardą, pavardę ir nuo kada dirba) iš lentelės DARBUOTOJAS ir išrikiuokite visus duomenis nuo dirbančio naujausiai iki seniausiai.

-- 13 Išrinkite iš lentelės DARBUOTOJAS projektų ID, kurie būtų minimalus ir maksimalus skaičius.

-- 14 Išrinkite duomenis apie tai, kiek kiekviename projekte yra priskirta žmonių (projekto numeris ir skaičius, kiek jame dalyvauja žmonių).
-- 15 #14 punkto užklausą pataisykite taip, kad rodytų tik tuos projektus, kuriems priskirti daugiau nei 3 darbuotojai.
SELECT PROJEKTAS_ID, count(*) from DARBUOTOJAS GROUP By PROJEKTAS_ID HAVING count(*) &gt; 3;

-- 16 Išrinkite duomenis (projekto numeris, pareigos, skaičius) iš lentelės DARBUOTOJAS, kiek programuotojų dirba kiekvienam projekte.
SELECT PAREIGOS, PROJEKTAS_ID, count(*) from DARBUOTOJAS WHERE PAREIGOS = &quot;Programuotojas&quot; GROUP By PROJEKTAS_ID;












</sql><current_tab id="2"/></tab_sql></sqlb_project>
